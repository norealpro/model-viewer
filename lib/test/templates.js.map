{"version":3,"file":"templates.js","sourceRoot":"","sources":["../../src/test/templates.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,UAAU,EAAC,MAAM,cAAc,CAAC;AAMxC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAE3B,MAAM,CAAC,MAAM,iBAAiB,GAC1B,CAAC,0BAAqE,EACrE,eAA6B,EAAE,EAAE;IAChC,IAAI,CAAC,8BAA8B,EAAE,GAAG,EAAE;QACxC,MAAM,kBAAkB,GAAG,0BAA0B,EAAE,CAAC;QACxD,MAAM,OAAO,GAAG,IAAI,kBAAkB,EAAE,CAAC;QACzC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,iDAAiD,EAAE,GAAG,EAAE;QAC3D,MAAM,OAAO,GAAG,eAAe,EAAE,CAAC;QAClC,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAChD,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,eAAe,EAAE,GAAG,EAAE;QAC1B,KAAK,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACxC,IAAI,gBAAqB,CAAC;YAE1B,KAAK,CAAC,GAAG,EAAE;gBACT,gBAAgB,GAAG,iBAAiB,CAAC,SAAS,CAAC,UAAU,CAAC;gBAC1D,iBAAiB,CAAC,SAAS,CAAC,UAAU,GAAG,UACrC,IAAY,EAAE,GAAG,IAAgB;oBACnC,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;wBACtB,OAAO,IAAI,CAAC;qBACb;oBACD,OAAO,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;gBACpD,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,QAAQ,CAAC,GAAG,EAAE;gBACZ,iBAAiB,CAAC,SAAS,CAAC,UAAU,GAAG,gBAAgB,CAAC;YAC5D,CAAC,CAAC,CAAC;YAEH,IAAI,CACA,4DAA4D,EAC5D,KAAK,IAAI,EAAE;gBACT,MAAM,kBAAkB,GAAG,0BAA0B,EAAE,CAAC;gBACxD,MAAM,OAAO,GAAG,IAAI,kBAAkB,EAAE,CAAC;gBACzC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;gBACnC,MAAM,UAAU,EAAE,CAAC;gBACnB,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;QACT,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import ModelViewerElementBase from '../model-viewer-base.js';\nimport {timePasses} from './helpers.js';\n\nexport type Constructor<T = object> = {\n  new (...args: any[]): T\n};\n\nconst expect = chai.expect;\n\nexport const BasicSpecTemplate =\n    (ModelViewerElementAccessor: () => Constructor<ModelViewerElementBase>,\n     tagNameAccessor: () => string) => {\n      test('can be directly instantiated', () => {\n        const ModelViewerElement = ModelViewerElementAccessor();\n        const element = new ModelViewerElement();\n        expect(element).to.be.ok;\n      });\n\n      test('can be instantiated with document.createElement', () => {\n        const tagName = tagNameAccessor();\n        const element = document.createElement(tagName);\n        expect(element).to.be.ok;\n      });\n\n      suite('compatibility', () => {\n        suite('when WebGL is not supported', () => {\n          let nativeGetContext: any;\n\n          setup(() => {\n            nativeGetContext = HTMLCanvasElement.prototype.getContext;\n            HTMLCanvasElement.prototype.getContext = function(\n                type: string, ...args: Array<any>) {\n              if (/webgl/.test(type)) {\n                return null;\n              }\n              return nativeGetContext.call(this, type, ...args);\n            };\n          });\n\n          teardown(() => {\n            HTMLCanvasElement.prototype.getContext = nativeGetContext;\n          });\n\n          test(\n              'does not explode when created and appended to the document',\n              async () => {\n                const ModelViewerElement = ModelViewerElementAccessor();\n                const element = new ModelViewerElement();\n                document.body.appendChild(element);\n                await timePasses();\n                document.body.removeChild(element);\n              });\n        });\n      });\n    };\n"]}